{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"re",
				"p· resources\tluxe.Resources"
			],
			[
				"palet",
				"paletteSrc"
			],
			[
				"id",
				"p· IDEAL_SCREEN_SIZE_H\tFloat"
			],
			[
				"i",
				"p· IDEAL_SCREEN_SIZE_W\tFloat"
			],
			[
				"de",
				"p· depth\tFloat"
			],
			[
				"ui",
				"p· uiWorld\tphoenix.Batcher"
			],
			[
				"playba",
				"playbackModeIndex"
			],
			[
				"pl",
				"playbackModes"
			],
			[
				"playb",
				"playbackModeIndex"
			],
			[
				"in",
				"m· indexOf\tInt"
			],
			[
				"grouP",
				"groupResults"
			],
			[
				"keyfra",
				"keyframes"
			],
			[
				"CO",
				"Color"
			],
			[
				"palete",
				"paletteUpTimer"
			],
			[
				"ti",
				"p· timer\tluxe.Timer"
			],
			[
				"sc",
				"p· screen\tluxe.Screen"
			],
			[
				"Eid",
				"Editor"
			],
			[
				"min",
				"minPoint"
			],
			[
				"loca",
				"localPos"
			],
			[
				"s",
				"scale"
			],
			[
				"u_path",
				"u_pathLength"
			],
			[
				"vert",
				"vertexColor"
			],
			[
				"vertex",
				"vertexPosition"
			],
			[
				"path",
				"pathFloatArray"
			],
			[
				"animat",
				"animationPreviewDuration"
			],
			[
				"mult",
				"multiselection"
			],
			[
				"getCh",
				"m· getVexChildren\tArray<vexlib.Vex>"
			],
			[
				"children",
				"childrenJson"
			],
			[
				"ba",
				"p· batcher\tNull<phoenix.Batcher>"
			],
			[
				"Ed",
				"p· EditingTools\tEditingTools"
			],
			[
				"uiSc",
				"p· uiScene\tphoenix.Batcher"
			],
			[
				"uisc",
				"p· uiScreen\tphoenix.Batcher"
			],
			[
				"Edi",
				"Editor"
			],
			[
				"keyd",
				"m· keydownSaveVex\t "
			],
			[
				"m",
				"p· matrix\tphoenix.Matrix"
			],
			[
				"selec",
				"selected"
			],
			[
				"mulit",
				"multiSelection"
			],
			[
				"mulitsel",
				"multiselection"
			],
			[
				"multise",
				"multiselection"
			],
			[
				"multi",
				"multiselect"
			],
			[
				"mulitse",
				"multiselection"
			],
			[
				"multis",
				"multiselection"
			],
			[
				"muli",
				"multiselection"
			],
			[
				"sele",
				"selection"
			],
			[
				"keydow",
				"m· keydownUngroupVex\tvexlib.Vex"
			],
			[
				"select",
				"selection"
			],
			[
				"keydo",
				"m· keydownRotateVex\tBool"
			],
			[
				"Key",
				"KeyEvent"
			],
			[
				"seria",
				"m· serializeMultipath\tString"
			],
			[
				"sel",
				"selection"
			],
			[
				"pu",
				"public"
			],
			[
				"curren",
				"currentTool"
			],
			[
				"drawp",
				"m· drawPoints\t "
			],
			[
				"scen",
				"uiSceneBatcher"
			],
			[
				"screen",
				"screenBatcher"
			],
			[
				"drawing",
				"drawingPath"
			],
			[
				"is",
				"p· isPathClosed\tBool"
			],
			[
				"isp",
				"p· isPathFinished\tBool"
			],
			[
				"isPath",
				"isPathClosed"
			],
			[
				"isPat",
				"isPathFinished"
			],
			[
				"drawin",
				"drawingPath"
			],
			[
				"ispa",
				"isPathClosed"
			],
			[
				"C",
				"p· Color\tColor"
			],
			[
				"curre",
				"currentTool"
			],
			[
				"curr",
				"currentTool"
			],
			[
				"draw",
				"drawingPath"
			],
			[
				"fin",
				"m· findTopLeft\tluxe.Vector"
			],
			[
				"Vex",
				"VexTools"
			],
			[
				"or",
				"origin"
			],
			[
				"div",
				"m· divideScalar\tphoenix.Vector"
			],
			[
				"uiB",
				"uiSceneBatcher"
			],
			[
				"mouse",
				"MouseButton"
			],
			[
				"panC",
				"m· panCameraWhileRightMouseDown\tBool"
			],
			[
				"pan",
				"m· panCameraWhileRightMouseDown\tBool"
			],
			[
				"x",
				"p· x_rel\tInt"
			],
			[
				"impor",
				"m· importVexReference\tvexlib.Vex"
			],
			[
				"open",
				"m· openVex\tvexlib.Vex"
			],
			[
				"saveSt",
				"saveString"
			],
			[
				"Edit",
				"EditingTools"
			],
			[
				"vecto",
				"m· vectorToWorldSpace\tluxe.Vector"
			],
			[
				"toWol",
				"m· vectorToWorldSpace\tluxe.Vector"
			],
			[
				"prevori",
				"prevOriginLocalSpace"
			],
			[
				"vect",
				"m· vectorToWorldSpace\tluxe.Vector"
			],
			[
				"vectot",
				"m· vectorToParentSpace\tluxe.Vector"
			],
			[
				"vectorTo",
				"m· vectorToParentSpace\tluxe.Vector"
			],
			[
				"tra",
				"transform"
			],
			[
				"vec",
				"m· vectorToLocalSpace\tluxe.Vector"
			],
			[
				"find",
				"m· findVexById\tArray<vexlib.Vex>"
			],
			[
				"ad",
				"m· addMultiLineToGeometry\tphoenix.geometry.Geometry"
			],
			[
				"mu",
				"multiline"
			],
			[
				"stringTopa",
				"stringToPaletteColor"
			],
			[
				"stringToH",
				"stringToHexColor"
			],
			[
				"St",
				"String"
			],
			[
				"substr",
				"m· substring\tString"
			],
			[
				"StringTo",
				"StringToMultipath"
			],
			[
				"func",
				"function"
			],
			[
				"y",
				"p· y_rel\tInt"
			],
			[
				"Ex",
				"Exit"
			],
			[
				"Exi",
				"ExitOptions"
			],
			[
				"bouncy",
				"bouncyArrow"
			],
			[
				"bounc",
				"bouncyArrow"
			],
			[
				"ea",
				"p· easeInOut\tluxe.tween.easing.IEasing"
			],
			[
				"eas",
				"easing"
			],
			[
				"dial",
				"dialogArrowBounce"
			],
			[
				"boun",
				"dialogArrowBounceAnim"
			],
			[
				"curD",
				"curDescription"
			],
			[
				"next",
				"nextChar"
			],
			[
				"max",
				"maxRow"
			],
			[
				"curdi",
				"curDialogRow"
			],
			[
				"isdi",
				"isDescriptionMode"
			],
			[
				"curDi",
				"curDialogRow"
			],
			[
				"clear",
				"clearDescription"
			],
			[
				"iswa",
				"isWaitingToContinueCurDialog"
			],
			[
				"isw",
				"isWaitingToContinueCurDialog"
			],
			[
				"curR",
				"curDialogRow"
			],
			[
				"retu",
				"returnObj"
			],
			[
				"textboxpad",
				"textBoxPadY"
			],
			[
				"textboxpa",
				"textBoxPadX"
			],
			[
				"batc",
				"batch"
			],
			[
				"b",
				"p· batcher\tphoenix.Batcher"
			],
			[
				"texb",
				"textBoxHeight"
			],
			[
				"textbo",
				"textBoxY"
			],
			[
				"description",
				"descriptionVex"
			],
			[
				"wo",
				"m· screen_point_to_world\tluxe.Vector"
			],
			[
				"scre",
				"screenMidWorldPos"
			],
			[
				"isdes",
				"isDescriptionMode"
			],
			[
				"isDesc",
				"isDescriptionMode"
			],
			[
				"p",
				"player"
			]
		]
	},
	"buffers":
	[
		{
			"file": "vignette0.flow",
			"settings":
			{
				"buffer_size": 319,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Main.hx",
			"settings":
			{
				"buffer_size": 37858,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/adamrossledoux/Code/Haxe/AdventureGame/VexLib/vexlib/Palette.hx",
			"settings":
			{
				"buffer_size": 2105,
				"line_ending": "Unix"
			}
		},
		{
			"file": "assets/bus_out_stage1.vex",
			"settings":
			{
				"buffer_size": 15558,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/ScrollInputHandler.hx",
			"settings":
			{
				"buffer_size": 1748,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/UniversalJoystick.hx",
			"settings":
			{
				"buffer_size": 9349,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				"Clean"
			]
		],
		[
			[
				[
					"Packages/sublime_flow/flow.sublime-build",
					""
				],
				[
					"Packages/User/xcode.sublime-build",
					""
				]
			],
			[
				"Packages/sublime_flow/flow.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 87.0,
		"last_filter": "package control: up",
		"selected_items":
		[
			[
				"package control: up",
				"Package Control: Upgrade Package"
			],
			[
				"package control: ins",
				"Package Control: Install Package"
			],
			[
				"package control: remov",
				"Package Control: Remove Package"
			],
			[
				"package control up",
				"Package Control: Upgrade Package"
			],
			[
				"package control list",
				"Package Control: List Packages"
			],
			[
				"package control ins",
				"Package Control: Install Package"
			],
			[
				"color",
				"Colorsublime: Browse Themes"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"colrosu",
				"Colorsublime: Install Theme"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"add repos",
				"Package Control: Add Repository"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"package",
				"Package Control: Remove Package"
			],
			[
				"package contorl: up",
				"Package Control: Upgrade Package"
			],
			[
				"pacakge control",
				"Package Control: List Packages"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"package cont",
				"Package Control: Add Repository"
			],
			[
				"package control u",
				"Package Control: Upgrade Package"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"add",
				"Package Control: Add Repository"
			],
			[
				"add repo",
				"Package Control: Add Repository"
			],
			[
				"package control: ",
				"Package Control: Install Package"
			]
		],
		"width": 428.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/adamrossledoux/Code/Haxe/FlappyWitch/src/Main.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexEd/assets/testsaveanim.vex",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexEd/assets/stage_test_0.vex",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexLib/vexlib/Animation.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexPlay/assets/peckanim3.vex",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexPlay/assets/pigeon5.vex",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexLib/vexlib/Tools.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexLib/vexlib/GameTools.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexPlay/assets/pigeon4.vex",
		"/Users/adamrossledoux/Code/haxelib/luxe/git/phoenix/defaults/shaders/vert.glsl",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexEd/assets/testpal.vex",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexLib/vexlib/Palette.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexEd/assets/pico8pal.vex",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexEd/assets/pico8limited.vex",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexEd/assets/bluescale.vex",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexEd/assets/greenscale.vex",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexEd/assets/kid_ponytail_idle1.vex",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexEd/assets/kid_ponytail5.vex",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexEd/assets/kid_shiver_anim.vex",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexEd/assets/kid1_withBreath.vex",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexEd/assets/shaders/polyfrag.glsl",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexEd/assets/shaders/polyvert.glsl",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexEd/src/Command.hx",
		"/Users/adamrossledoux/Code/Haxe/Pincushion/pincushion/Pincushion.hx",
		"/Users/adamrossledoux/Code/Haxe/Pincushion/pincushion/DrawingState.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexStage/project.flow",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexPlay/project.flow",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexLib/vexlib.flow",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexLib/vexlib/Vex.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexPlay/src/Main.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexStage/src/Main.hx",
		"/Users/adamrossledoux/Dropbox/Public/bitsy/driftwood.txt",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexLib/vexlib/VexPropertyInterface.hx",
		"/Users/adamrossledoux/Code/Haxe/Pincushion/pincushion.flow",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexPlay/src/UniversalJoystick.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexPlay/assets/testpal.vex",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexLib/vexlib/Stage.hx",
		"/Users/adamrossledoux/Code/haxelib/poly2trihx/0,1,4/org/poly2tri/VisiblePolygon.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexPlay/assets/stage2.vex",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexPlay/assets/newstagetest.vex",
		"/Users/adamrossledoux/Code/haxelib/luxe/git/luxe/Engine.hx",
		"/Users/adamrossledoux/Code/haxelib/luxe/git/luxe/utils/Maths.hx",
		"/Users/adamrossledoux/Code/haxelib/luxe/git/luxe/Game.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexDialogPlayer/src/Main.hx",
		"/Users/adamrossledoux/Code/haxelib/luxe/git/phoenix/Camera.hx",
		"/Users/adamrossledoux/Code/haxelib/luxe/git/luxe/Camera.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexPlay/assets/testpal2.vex",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexStage/assets/shroom.vex",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexStage/assets/testpal.vex",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexStage/assets/stage1.vex",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexStage/assets/stage0.vex",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexStage/assets/stage2.vex",
		"/Users/adamrossledoux/Code/Web/other bitsy games/wonkybits_restored.html",
		"/Users/adamrossledoux/Code/Web/other bitsy games/rise.html",
		"/Users/adamrossledoux/Downloads/mygame (18).html",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexDialogPlayer/project.flow",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexLetterer/project.flow",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexDialogPlayer/assets/testdialog.txt",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexLib/vexlib/Font.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexLetterer/src/Main.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/DialogWriter/src/Main.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexPlay/assets/playground1.vex",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexDialogPlayer/assets/sysfont.vex",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexLetterer/src/Font.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/VexLetterer/assets/testfont.vex",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/AventurLib/adventurlib/Word.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/AdventurEr/src/ScrollInputHandler.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/AventurLib/adventurlib/Avatar.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/AventurLib/adventurlib/Dialog.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/DialogWriter/dialogwriter.flow",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/AventurLib/adventurlib/Level.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/AdventurEr/src/Main.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/AdventurEd/src/Main.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/AventurLib/adventurlib/Terrain.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/AdventurEr/adventurer.flow",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/AdventurEr/assets/5_bagelBakery_b",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/AdventurEr/assets/4_bagelEntrance_b",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/AdventurEr/assets/2_mahjongApt",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/AdventurEr/assets/3_street_b",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/AventurLib/adventurlib/ActionButton.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/adventuregame.sublime-workspace",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/AdventurEd/assets/4_bagelEntrance_b",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/AdventurEd/assets/4_bagelEntrance_c",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/AdventurEd/assets/4_bagelEntrance",
		"/Users/adamrossledoux/Code/Haxe/SVGPrototype/assets/testvex.json",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/AdventurEr/assets/1_theOtherKidsFled",
		"/Users/adamrossledoux/Code/haxelib/luxe/git/luxe/Component.hx",
		"/Users/adamrossledoux/Code/Haxe/EmojiPrototype/assets/emojione/emoji_strategy.json",
		"/Users/adamrossledoux/Code/Haxe/EmojiPrototype/assets/emojione/emoji.json",
		"/Users/adamrossledoux/Code/Web/Other People's Code & Libraries/emojione-master/emoji_strategy.json",
		"/Users/adamrossledoux/Code/Web/Other People's Code & Libraries/emojione-master/emoji.json",
		"/Users/adamrossledoux/Code/Haxe/EmojiPrototype/src/Emojione.hx",
		"/Users/adamrossledoux/Code/Haxe/EmojiPrototype/src/Emoji.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/AventurLib/adventurlib/VectorExtender.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/AventurLib/adventurlib/ScrollInputHandler.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/AventurLib/adventurlib/Polystroke.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/AventurLib/adventurlib/PolylineExtender.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/AventurLib/adventurlib/ColorExtender.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventureGame/AdventurEr/project.flow",
		"/Users/adamrossledoux/Code/Haxe/libs/pincushion/pincushion/Pincushion.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventurEd/assets/leveltest7",
		"/Users/adamrossledoux/Code/Haxe/AdventurEr/assets/leveltest10",
		"/Users/adamrossledoux/Code/Haxe/StarGazing/src/Main.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventurEd/assets/leveltest2",
		"/Users/adamrossledoux/Code/Haxe/libs/pincushion/pincushion/Pin.hx",
		"/Users/adamrossledoux/Code/Haxe/ScrollProto/src/Level.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventurEd/assets/terrain_test2.json",
		"/Users/adamrossledoux/Code/Haxe/AdventurEd/assets/terrain_test.json",
		"/Users/adamrossledoux/Code/Haxe/libs/pincushion/pincushion/Polyfill.hx",
		"/Users/adamrossledoux/Library/Application Support/Sublime Text 3/Packages/User/node.sublime-build",
		"/Users/adamrossledoux/Code/Web/TPChess/BoardRendererSVG/board.html",
		"/Users/adamrossledoux/Code/Web/TPChess/BoardRendererGIF/main.js",
		"/Users/adamrossledoux/Code/Haxe/ScrollProto/src/Main.hx",
		"/Users/adamrossledoux/Code/Haxe/ScrollProto/project.flow",
		"/Users/adamrossledoux/Code/C++/Boat/src/Boat.cpp",
		"/Users/adamrossledoux/Code/C++/Boat/src/Boat.h",
		"/Users/adamrossledoux/Code/C++/Boat/src/Sailor.cpp",
		"/Users/adamrossledoux/Code/C++/Boat/src/Lighthouse.cpp",
		"/Users/adamrossledoux/Code/C++/Boat/res/Info.plist",
		"/Applications/Boycott Advance.app/Contents/Info.plist",
		"/Users/adamrossledoux/Code/C++/Boat/src/makefile",
		"/Users/adamrossledoux/Code/C++/Boat/src/utils.cpp",
		"/Users/adamrossledoux/Code/C++/Boat/src/main.cpp",
		"/usr/local/Cellar/glew/1.11.0/lib/libGLEW.a",
		"/Users/adamrossledoux/Code/C++/Boat/src/Flag.cpp",
		"/Users/adamrossledoux/Code/C++/Boat/src/Lightbeam.cpp",
		"/Users/adamrossledoux/Code/C++/Boat/src/RainParticles.cpp",
		"/Users/adamrossledoux/Code/C++/Boat/src/SplashParticles.cpp"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"<current file>",
			"<current file>,<open files>",
			"<current file>",
			"<current file>,<open files>",
			"<current file>",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"player.scale",
			"queueAnimation",
			"player.playanimation",
			"palette",
			"new vex",
			"paloffset",
			"gif capture",
			"keyframes",
			"palOffset",
			"id",
			"luxe.input",
			"new Vex",
			"no_geometry",
			"switchMode",
			"Editor.singleselection",
			"Editor.selection",
			"Editor.singleSelection",
			"Editor.selection",
			"multiSelection",
			"selected",
			"multiselection",
			"curpalindex",
			"curlineweight",
			"uiScene",
			"keydowndeletevex",
			"instance",
			"ispanning",
			"multiselection",
			"opensave",
			"group",
			"command",
			"sketch",
			"ispanning",
			"editingtools.",
			"toworldspace2",
			"rectangletopath",
			"onmousewheel",
			"stagesrc",
			"new stage",
			"description",
			"camera.",
			"refle",
			"dialogarrowbounce",
			"pullvelocity",
			"pulldelta",
			"curdescription",
			"trace",
			"draw.box",
			"batcher",
			"new vex",
			"luxe.renderer.batcher",
			"batcher",
			"iswaiting",
			"//y",
			"pulldelta =",
			"pulldelta",
			"clear_color =",
			"path",
			"set",
			"set.",
			"set",
			"key_s",
			"root",
			"\\n",
			"til ",
			"\\\\n",
			"exportedgamedata",
			"uiscreenbat",
			"ispanning",
			"zoom",
			"components",
			"debugDialog",
			"textboxy",
			"clearpage",
			"animateStrokes",
			"typingcount",
			"//save",
			"tween",
			"typingcount",
			"mode = ",
			"trace",
			"mode = ",
			"trace",
			"weight",
			"scrollinput",
			"camera.",
			"player.",
			"coast",
			"disappear",
			"button_",
			"backgroundColor",
			"bounce",
			"Luxe.camera.pos",
			"terrainColor",
			"terrainCo",
			"color",
			"Luxe.draw.circle",
			"camera.pos",
			"depth",
			"isCoasting",
			"changeVelocity",
			"dialogmode",
			"backgroundColor",
			"backgrou",
			"backgroundColor",
			"Color",
			"trace",
			"isanimationinprogress",
			"curDialog",
			"\"category",
			"curIndex",
			",\"aliases_ascii\":\\[(.*?)\\],",
			",\"aliases_ascii\":\\[(.*)?\\],",
			",\"aliases_ascii\":\\[.*\\]?,",
			",\"aliases_ascii\":\\[.*\\],",
			"\"aliases_ascii\":\\[\\]",
			"\"aliases_ascii\":\\[.+\\]",
			"aliases_ascii",
			"travel",
			"place",
			"all",
			"\":([a-zA-Z0-9_]+):\"",
			"\":([a-zA-Z_]+):\"",
			"\":*:\"",
			"\":",
			"typeof",
			"this.emojione",
			"actionButtons"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"Editor.selection",
			"Editor.multiselection",
			"Editor.selection",
			"Editor.multiselection",
			"Editor.selection",
			"selected",
			"Editor.singleSelection",
			"root",
			"}\n",
			"selected",
			"Editor.selection",
			"Editor.curPalIndex",
			"uiWorld",
			"\\\\n",
			"\\n",
			"pages",
			"code",
			"pickIndex",
			",",
			"emoji",
			"\"$1\"",
			"\"*\"",
			"\"",
			"fromJson",
			"toJson",
			"level2Stuff.testCharacterPos",
			"speechButton",
			"pos",
			"player.terrainPos",
			"isCamTooFarRightAndMovingRight",
			"isCamTooFarLeftAndMovingLeft",
			"releaseVelocity",
			"touchDelta",
			"velocitySamples",
			"h.",
			"h",
			"totalPlayTime",
			"void dramaUpdate(float dt) {\n\tdramaTimer += dt;\n\ttotalPlayTime += dt;\n\t//std::cout << dramaTimer << std::endl;\n\n\tfloat startOfStormTime = (dramaticArc[0].time + dramaticArc[1].time + dramaticArc[2].time);\n\tfloat hardModeTime = (dramaticArc[0].time + dramaticArc[1].time + dramaticArc[2].time + \n\t\t\t\t\t\t\tdramaticArc[3].time);\n\tfloat impossibleModeTime = (dramaticArc[0].time + dramaticArc[1].time + dramaticArc[2].time + \n\t\t\t\t\t\t\tdramaticArc[3].time + dramaticArc[4].time);\n\tfloat fakeCalmTime = (dramaticArc[0].time + dramaticArc[1].time + dramaticArc[2].time + \n\t\t\t\t\t\t\tdramaticArc[3].time + dramaticArc[4].time + dramaticArc[5].time);\n\tfloat endOfStormTime = (dramaticArc[0].time + dramaticArc[1].time + dramaticArc[2].time + \n\t\t\t\t\t\t\tdramaticArc[3].time + dramaticArc[4].time + dramaticArc[5].time + \n\t\t\t\t\t\t\tdramaticArc[6].time);\n\n\t//std::cout << dramaTimer << std::endl;\n\n\t//if (dramaTimer > dramaticArc[dramaIndex].time && dramaIndex < 5) {\n\tif (dramaTimer > dramaticArc[dramaIndex].time && dramaIndex < 6) {\n\t\t//std::cout << \"next difficulty!!!\" << std::endl;\n\t\tdramaIndex++;\n\t\tcurDifficulty = dramaticArc[dramaIndex].difficulty;\n\t\tdramaTimer = 0;\n\n\t\t//make the current wave dissapear\n\t\tdidWaveHitPlayer = true;\n\t\twaveDissapearTimer = 0;\n\t\twaveStartHeight = wavePos.y;\n\t}\n\n\t//send the flag flying away\n\tif (totalTime > (endOfStormTime - 10) && flag.isAttachedToBoat) {\n\t\tflag.setRotYGoal( 270 );\n\t\tflag.isAttachedToBoat = false;\n\t}\n\n\tif (!isTheBigOne && totalTime > (endOfStormTime - 5)) {\n\t\t//std::cout << \"HERE IT COMES \" << std::endl;\n\t\tstartBigWave();\n\t}\n\t\n\t//lighthouse events\n\tif (totalTime > 2 && lighthouseMoveCounter < 1) {\n\t\tlighthouse.moveTo(glm::vec3(6, -3.7, 10), startOfStormTime - 2);\n\t\tlighthouseMoveCounter++;\n\t}\n\telse if (totalTime > (endOfStormTime + 30 + 3) && lighthouseMoveCounter < 2) {\n\t\t//lighthouse.moveTo(glm::vec3(1.8, -0.4, 2.7), 15);\n\t\tlighthouse.moveTo(glm::vec3(2, -0.4, 2.7), 15);\n\t\tlighthouseMoveCounter++;\n\t}\n\t\n\n\t//storminess\n\tif (totalTime < startOfStormTime - 5) {\n\t\tstorminess = 0;\n\t}\n\telse if (totalTime < startOfStormTime) {\n\t\tstorminess = (totalTime - (startOfStormTime - 5)) / 5;\n\t}\n\telse if (totalTime < (endOfStormTime + 15)) {\n\t\tstorminess = 1;\n\t}\n\telse if (totalTime < endOfStormTime + 20) {\n\t\tstorminess = (5 - (totalTime - (endOfStormTime + 15))) / 5;\n\t}\n\telse {\n\t\tstorminess = 0;\n\t}\n\n\n\t//lightning\n\tlightningTimer += dt;\n\t//if (totalTime > (startOfStormTime - 2.51) && totalTime < startOfStormTime) { //start of storm\n\tif (totalTime > startOfStormTime && totalTime < (startOfStormTime + 1)) {\n\t\tif (lightningStrikeCounter < 1) {\n\t\t\tlightningTimer = 0;\n\t\t\tlightningStrikeCounter++;\n\t\t}\n\t}\n\telse if (totalTime > hardModeTime && totalTime < (hardModeTime + 5)) { //start of second wave\n\t\tif (lightningStrikeCounter < 2) {\n\t\t\tlightningTimer = 0;\n\t\t\tlightningStrikeCounter++;\n\t\t}\n\t}\n\t//else if (totalTime > impossibleModeTime && totalTime < (impossibleModeTime + 5)) { //start of third wave\n\telse if (totalTime > (impossibleModeTime - 1) && totalTime < impossibleModeTime) { //start of third wave\n\t\tif (lightningStrikeCounter < 3) {\n\t\t\tlightningTimer = 0;\n\t\t\tlightningStrikeCounter++;\n\t\t\t//timeBetweenLightning = (2 + (rand() % 5)) * 1.0f;\n\t\t}\n\t}\n\telse if (totalTime > impossibleModeTime && totalTime < (fakeCalmTime - 5)) { //third wave\n\t\tdoesLightningStrikeOnWaveCollision = true;\n\t\tlightningTimer += dt; //double the speed of lightning in this period\n\n\t\t/*\n\t\ttimeBetweenLightning -= dt;\n\n\t\tif (timeBetweenLightning <= 0) {\n\t\t\tlightningTimer = 0;\n\t\t\ttimeBetweenLightning = (3 + (rand() % 4)) * 1.0f;\n\t\t\t//NOTE: this works ok. other possible ideas: \n\t\t\t//lightning every time the boat gets hit, \n\t\t\t//lightning every time a wave starts\n\t\t}\n\t\t*/\n\t}\n\telse if (totalTime > fakeCalmTime && totalTime < (fakeCalmTime + 5)) { //end of third wave\n\t\tdoesLightningStrikeOnWaveCollision = false;\n\t\tif (lightningStrikeCounter < 4) {\n\t\t\tlightningTimer = 0;\n\t\t\tlightningStrikeCounter++;\n\t\t}\n\t}\n\t//else if (totalTime > (endOfStormTime + 20 - 2.51) && totalTime < (endOfStormTime + 25)) { //end of storm\n\telse if (totalTime > (endOfStormTime + 20 - 5) && totalTime < (endOfStormTime + 25)) { //end of storm\n\t\tif (lightningStrikeCounter < 5) {\n\t\t\tlightningTimer = 0;\n\t\t\tlightningStrikeCounter++;\n\t\t}\n\t}\t\n}\n",
			"totalPlayTime",
			"animationLerp",
			"poseLerp",
			"Animation",
			"Frame",
			"Pose",
			"isPinDraggable",
			"bones",
			"mapping",
			"mapMeshToBones",
			"boneList",
			"utilities",
			"enterGroupHandle",
			"groupHandle",
			"isGroupingLayers",
			"getRectBounds",
			"closestVertex(",
			"addSelectedLayerToComponentManagerInput",
			"addComponentToEntity",
			"addEntity",
			"jsonRepresentation",
			"polylineSplit",
			"polylineIntersections",
			"findIntersections",
			"",
			"PolygonDrawState",
			"EditorState",
			"switchLayerSelection",
			"curColor"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "vignette0.flow",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 319,
						"regions":
						{
						},
						"selection":
						[
							[
								99,
								99
							]
						],
						"settings":
						{
							"syntax": "Packages/sublime_flow/flow-file.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/Main.hx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37858,
						"regions":
						{
						},
						"selection":
						[
							[
								5429,
								5384
							]
						],
						"settings":
						{
							"syntax": "Packages/sublime_haxe/Haxe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 3.0,
						"translation.y": 612.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/Users/adamrossledoux/Code/Haxe/AdventureGame/VexLib/vexlib/Palette.hx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2105,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/sublime_haxe/Haxe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 525.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "assets/bus_out_stage1.vex",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15558,
						"regions":
						{
						},
						"selection":
						[
							[
								15554,
								15554
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5215.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/ScrollInputHandler.hx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1748,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/sublime_haxe/Haxe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/UniversalJoystick.hx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9349,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/sublime_haxe/Haxe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 268.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 100.0
	},
	"pinned_build_system": "Packages/sublime_flow/flow.sublime-build",
	"project": "vignette0.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 87.0,
		"last_filter": "read",
		"selected_items":
		[
			[
				"read",
				"ready"
			],
			[
				"up",
				"update"
			],
			[
				"keydi",
				"keydownImportVexReference"
			],
			[
				"keydo",
				"keydownOpenVex"
			],
			[
				"set_t",
				"set_t"
			],
			[
				"des",
				"deserialize"
			],
			[
				"keydowngrou",
				"keydownGroupVex"
			],
			[
				"findke",
				"findKeyframe"
			],
			[
				"keydownsc",
				"keydownScaleVex"
			],
			[
				"setp",
				"setPathProperties"
			],
			[
				"zoom",
				"zoomCamera"
			],
			[
				"set_sc",
				"set_scale"
			],
			[
				"parsev",
				"parseVector"
			],
			[
				"group",
				"groupVex"
			],
			[
				"reset",
				"resetToBasePose"
			],
			[
				"mousedownch",
				"mousedownChangeSelection"
			],
			[
				"sele",
				"select"
			],
			[
				"keydownde",
				"keydownDeleteVex"
			],
			[
				"keydownchange",
				"keydownChangeDepthVex"
			],
			[
				"onkey",
				"onkeydown"
			],
			[
				"grouv",
				"groupVex"
			],
			[
				"groupv",
				"keydownGroupVex"
			],
			[
				"keydownd",
				"keydownDeleteVex"
			],
			[
				"keyd",
				"keydownDeleteVex"
			],
			[
				"ispoin",
				"isPointInside"
			],
			[
				"vectorot",
				"vectorToLocalSpace"
			],
			[
				"desi",
				"deserializeRef"
			],
			[
				"get_chil",
				"get_children"
			],
			[
				"seri",
				"serialize"
			],
			[
				"loadre",
				"loadRef"
			],
			[
				"set_chi",
				"set_children"
			],
			[
				"getve",
				"getVexChildren"
			],
			[
				"children",
				"getVexChildren"
			],
			[
				"set_com",
				"set_components"
			],
			[
				"edit",
				"update_edit"
			],
			[
				"renderse",
				"renderSelectionBounds"
			],
			[
				"draw",
				"update_draw"
			],
			[
				"getse",
				"get_selected"
			],
			[
				"select",
				"get_selected"
			],
			[
				"onkeydowne",
				"onkeydown_edit"
			],
			[
				"panc",
				"panCamera"
			],
			[
				"keydownop",
				"keydownOpenVex"
			],
			[
				"rendersel",
				"renderSelectionBounds"
			],
			[
				"keydowne",
				"keydownDeleteVex"
			],
			[
				"opensave",
				"keydownOpenSaveVex"
			],
			[
				"drawve",
				"drawVexBounds"
			],
			[
				"pathtowl",
				"pathToWorldSpace"
			],
			[
				"bounds",
				"boundsWorld"
			],
			[
				"opensav",
				"keydownOpenSaveVex"
			],
			[
				"openve",
				"openVex"
			],
			[
				"renderd",
				"renderDrawingPath"
			],
			[
				"com",
				"ComponentJsonFormat"
			],
			[
				"getver",
				"getVerticesAndTriangles"
			],
			[
				"mousewh",
				"onmousewheel"
			],
			[
				"isar",
				"isArrowVisible"
			],
			[
				"yax",
				"yAxisHeld"
			],
			[
				"upd",
				"update"
			],
			[
				"nextp",
				"nextDialogPage"
			],
			[
				"nextpage",
				"nextDialogPage"
			],
			[
				"star",
				"start_description"
			],
			[
				"write",
				"writeText"
			],
			[
				"start",
				"start_description"
			],
			[
				"startd",
				"start_description"
			],
			[
				"writet",
				"writeText"
			],
			[
				"return",
				"DialogReturn"
			],
			[
				"deseri",
				"deserialize"
			],
			[
				"orthwor",
				"ortho_world_to_screen"
			],
			[
				"worl",
				"world_point_to_screen"
			],
			[
				"world",
				"world_point_to_screen"
			],
			[
				"worldpos",
				"worldPosFromPathPos"
			],
			[
				"serai",
				"serialize"
			],
			[
				"sera",
				"serialize"
			],
			[
				"onmou",
				"onmousedown"
			],
			[
				"update",
				"update_edit"
			],
			[
				"onke",
				"onkeydown"
			],
			[
				"onmoused",
				"onmousedown_edit"
			],
			[
				"onmouse",
				"onmousedown"
			],
			[
				"set_p",
				"set_path"
			],
			[
				"componej",
				"ComponentJsonFormat"
			],
			[
				"onchoi",
				"onChoiceMouseUp"
			],
			[
				"upda",
				"update"
			],
			[
				"donextp",
				"doNextPage"
			],
			[
				"onte",
				"ontextinput"
			],
			[
				"ontex",
				"ontextinput"
			],
			[
				"animates",
				"animateStrokes"
			],
			[
				"drawf",
				"drawFont"
			],
			[
				"drawfon",
				"drawFont"
			],
			[
				"swit",
				"switchMode"
			],
			[
				"text",
				"ontextinput"
			],
			[
				"switchmo",
				"switchMode"
			],
			[
				"swi",
				"switchMode"
			],
			[
				"onkeyd",
				"onkeydown"
			],
			[
				"set_pat",
				"set_path"
			],
			[
				"ser",
				"serialize"
			],
			[
				"dese",
				"deserialize"
			],
			[
				"fromm",
				"fromMultiPath"
			],
			[
				"fromp",
				"fromPath"
			],
			[
				"textp",
				"ontextinput"
			],
			[
				"camerl",
				"cameraLogic"
			],
			[
				"came",
				"cameraLogic"
			],
			[
				"cam",
				"cameraLogic"
			],
			[
				"ballu",
				"ballUpdate"
			],
			[
				"showl",
				"showLevel"
			],
			[
				"sw",
				"switchLevels"
			],
			[
				"disapp",
				"animateDisappear"
			],
			[
				"on",
				"onwindowresized"
			],
			[
				"enterd",
				"enterDialog"
			],
			[
				"enter",
				"enterDialog"
			],
			[
				"enterdi",
				"enterDialog"
			],
			[
				"animatea",
				"animateAppear"
			],
			[
				"dialogl",
				"dialogLogic"
			],
			[
				"enterD",
				"enterDialog"
			],
			[
				"insertp",
				"insertPoint"
			],
			[
				"set",
				"set_height"
			],
			[
				"addwo",
				"addWord"
			],
			[
				"set_v",
				"set_visible"
			],
			[
				"animateou",
				"animateOutro"
			],
			[
				"mouse",
				"onmousedown"
			],
			[
				"drawin",
				"drawIncomplete"
			],
			[
				"beg",
				"beginDialog"
			],
			[
				"shown",
				"showNext"
			],
			[
				"hide",
				"hideSentence"
			],
			[
				"test",
				"startDialogTest"
			],
			[
				"new",
				"new"
			],
			[
				"ini",
				"init"
			],
			[
				"texture",
				"texture"
			],
			[
				"add",
				"addStrokeToIllustration"
			],
			[
				"updat",
				"update"
			]
		],
		"width": 392.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
